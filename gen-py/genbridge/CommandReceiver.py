#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def sendMoveCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    pass

  def sendWaitCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    pass

  def sendLandCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    pass

  def sendFollowCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    pass

  def sendAttackCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    pass

  def sendDropMilitarsCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    pass

  def sendFillFuelTankCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    pass

  def sendExchangeResourcesCommandData(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    pass

  def sendBuildPlaneCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    pass

  def sendCancelBuildRequestCommandData(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def sendMoveCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    self.send_sendMoveCommand(cmd, idConnection)
    return self.recv_sendMoveCommand()

  def send_sendMoveCommand(self, cmd, idConnection):
    self._oprot.writeMessageBegin('sendMoveCommand', TMessageType.CALL, self._seqid)
    args = sendMoveCommand_args()
    args.cmd = cmd
    args.idConnection = idConnection
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendMoveCommand(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendMoveCommand_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendMoveCommand failed: unknown result");

  def sendWaitCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    self.send_sendWaitCommand(cmd, idConnection)
    return self.recv_sendWaitCommand()

  def send_sendWaitCommand(self, cmd, idConnection):
    self._oprot.writeMessageBegin('sendWaitCommand', TMessageType.CALL, self._seqid)
    args = sendWaitCommand_args()
    args.cmd = cmd
    args.idConnection = idConnection
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendWaitCommand(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendWaitCommand_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendWaitCommand failed: unknown result");

  def sendLandCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    self.send_sendLandCommand(cmd, idConnection)
    return self.recv_sendLandCommand()

  def send_sendLandCommand(self, cmd, idConnection):
    self._oprot.writeMessageBegin('sendLandCommand', TMessageType.CALL, self._seqid)
    args = sendLandCommand_args()
    args.cmd = cmd
    args.idConnection = idConnection
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendLandCommand(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendLandCommand_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendLandCommand failed: unknown result");

  def sendFollowCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    self.send_sendFollowCommand(cmd, idConnection)
    return self.recv_sendFollowCommand()

  def send_sendFollowCommand(self, cmd, idConnection):
    self._oprot.writeMessageBegin('sendFollowCommand', TMessageType.CALL, self._seqid)
    args = sendFollowCommand_args()
    args.cmd = cmd
    args.idConnection = idConnection
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendFollowCommand(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendFollowCommand_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendFollowCommand failed: unknown result");

  def sendAttackCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    self.send_sendAttackCommand(cmd, idConnection)
    return self.recv_sendAttackCommand()

  def send_sendAttackCommand(self, cmd, idConnection):
    self._oprot.writeMessageBegin('sendAttackCommand', TMessageType.CALL, self._seqid)
    args = sendAttackCommand_args()
    args.cmd = cmd
    args.idConnection = idConnection
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendAttackCommand(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendAttackCommand_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendAttackCommand failed: unknown result");

  def sendDropMilitarsCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    self.send_sendDropMilitarsCommand(cmd, idConnection)
    return self.recv_sendDropMilitarsCommand()

  def send_sendDropMilitarsCommand(self, cmd, idConnection):
    self._oprot.writeMessageBegin('sendDropMilitarsCommand', TMessageType.CALL, self._seqid)
    args = sendDropMilitarsCommand_args()
    args.cmd = cmd
    args.idConnection = idConnection
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendDropMilitarsCommand(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendDropMilitarsCommand_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendDropMilitarsCommand failed: unknown result");

  def sendFillFuelTankCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    self.send_sendFillFuelTankCommand(cmd, idConnection)
    return self.recv_sendFillFuelTankCommand()

  def send_sendFillFuelTankCommand(self, cmd, idConnection):
    self._oprot.writeMessageBegin('sendFillFuelTankCommand', TMessageType.CALL, self._seqid)
    args = sendFillFuelTankCommand_args()
    args.cmd = cmd
    args.idConnection = idConnection
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendFillFuelTankCommand(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendFillFuelTankCommand_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendFillFuelTankCommand failed: unknown result");

  def sendExchangeResourcesCommandData(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    self.send_sendExchangeResourcesCommandData(cmd, idConnection)
    return self.recv_sendExchangeResourcesCommandData()

  def send_sendExchangeResourcesCommandData(self, cmd, idConnection):
    self._oprot.writeMessageBegin('sendExchangeResourcesCommandData', TMessageType.CALL, self._seqid)
    args = sendExchangeResourcesCommandData_args()
    args.cmd = cmd
    args.idConnection = idConnection
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendExchangeResourcesCommandData(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendExchangeResourcesCommandData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendExchangeResourcesCommandData failed: unknown result");

  def sendBuildPlaneCommand(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    self.send_sendBuildPlaneCommand(cmd, idConnection)
    return self.recv_sendBuildPlaneCommand()

  def send_sendBuildPlaneCommand(self, cmd, idConnection):
    self._oprot.writeMessageBegin('sendBuildPlaneCommand', TMessageType.CALL, self._seqid)
    args = sendBuildPlaneCommand_args()
    args.cmd = cmd
    args.idConnection = idConnection
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendBuildPlaneCommand(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendBuildPlaneCommand_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendBuildPlaneCommand failed: unknown result");

  def sendCancelBuildRequestCommandData(self, cmd, idConnection):
    """
    Parameters:
     - cmd
     - idConnection
    """
    self.send_sendCancelBuildRequestCommandData(cmd, idConnection)
    return self.recv_sendCancelBuildRequestCommandData()

  def send_sendCancelBuildRequestCommandData(self, cmd, idConnection):
    self._oprot.writeMessageBegin('sendCancelBuildRequestCommandData', TMessageType.CALL, self._seqid)
    args = sendCancelBuildRequestCommandData_args()
    args.cmd = cmd
    args.idConnection = idConnection
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendCancelBuildRequestCommandData(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendCancelBuildRequestCommandData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendCancelBuildRequestCommandData failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["sendMoveCommand"] = Processor.process_sendMoveCommand
    self._processMap["sendWaitCommand"] = Processor.process_sendWaitCommand
    self._processMap["sendLandCommand"] = Processor.process_sendLandCommand
    self._processMap["sendFollowCommand"] = Processor.process_sendFollowCommand
    self._processMap["sendAttackCommand"] = Processor.process_sendAttackCommand
    self._processMap["sendDropMilitarsCommand"] = Processor.process_sendDropMilitarsCommand
    self._processMap["sendFillFuelTankCommand"] = Processor.process_sendFillFuelTankCommand
    self._processMap["sendExchangeResourcesCommandData"] = Processor.process_sendExchangeResourcesCommandData
    self._processMap["sendBuildPlaneCommand"] = Processor.process_sendBuildPlaneCommand
    self._processMap["sendCancelBuildRequestCommandData"] = Processor.process_sendCancelBuildRequestCommandData

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_sendMoveCommand(self, seqid, iprot, oprot):
    args = sendMoveCommand_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendMoveCommand_result()
    result.success = self._handler.sendMoveCommand(args.cmd, args.idConnection)
    oprot.writeMessageBegin("sendMoveCommand", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendWaitCommand(self, seqid, iprot, oprot):
    args = sendWaitCommand_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendWaitCommand_result()
    result.success = self._handler.sendWaitCommand(args.cmd, args.idConnection)
    oprot.writeMessageBegin("sendWaitCommand", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendLandCommand(self, seqid, iprot, oprot):
    args = sendLandCommand_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendLandCommand_result()
    result.success = self._handler.sendLandCommand(args.cmd, args.idConnection)
    oprot.writeMessageBegin("sendLandCommand", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendFollowCommand(self, seqid, iprot, oprot):
    args = sendFollowCommand_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendFollowCommand_result()
    result.success = self._handler.sendFollowCommand(args.cmd, args.idConnection)
    oprot.writeMessageBegin("sendFollowCommand", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendAttackCommand(self, seqid, iprot, oprot):
    args = sendAttackCommand_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendAttackCommand_result()
    result.success = self._handler.sendAttackCommand(args.cmd, args.idConnection)
    oprot.writeMessageBegin("sendAttackCommand", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendDropMilitarsCommand(self, seqid, iprot, oprot):
    args = sendDropMilitarsCommand_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendDropMilitarsCommand_result()
    result.success = self._handler.sendDropMilitarsCommand(args.cmd, args.idConnection)
    oprot.writeMessageBegin("sendDropMilitarsCommand", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendFillFuelTankCommand(self, seqid, iprot, oprot):
    args = sendFillFuelTankCommand_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendFillFuelTankCommand_result()
    result.success = self._handler.sendFillFuelTankCommand(args.cmd, args.idConnection)
    oprot.writeMessageBegin("sendFillFuelTankCommand", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendExchangeResourcesCommandData(self, seqid, iprot, oprot):
    args = sendExchangeResourcesCommandData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendExchangeResourcesCommandData_result()
    result.success = self._handler.sendExchangeResourcesCommandData(args.cmd, args.idConnection)
    oprot.writeMessageBegin("sendExchangeResourcesCommandData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendBuildPlaneCommand(self, seqid, iprot, oprot):
    args = sendBuildPlaneCommand_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendBuildPlaneCommand_result()
    result.success = self._handler.sendBuildPlaneCommand(args.cmd, args.idConnection)
    oprot.writeMessageBegin("sendBuildPlaneCommand", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendCancelBuildRequestCommandData(self, seqid, iprot, oprot):
    args = sendCancelBuildRequestCommandData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendCancelBuildRequestCommandData_result()
    result.success = self._handler.sendCancelBuildRequestCommandData(args.cmd, args.idConnection)
    oprot.writeMessageBegin("sendCancelBuildRequestCommandData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class sendMoveCommand_args:
  """
  Attributes:
   - cmd
   - idConnection
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cmd', (MoveCommandData, MoveCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idConnection', None, None, ), # 2
  )

  def __init__(self, cmd=None, idConnection=None,):
    self.cmd = cmd
    self.idConnection = idConnection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cmd = MoveCommandData()
          self.cmd.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idConnection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendMoveCommand_args')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.STRUCT, 1)
      self.cmd.write(oprot)
      oprot.writeFieldEnd()
    if self.idConnection is not None:
      oprot.writeFieldBegin('idConnection', TType.I32, 2)
      oprot.writeI32(self.idConnection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendMoveCommand_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Response, Response.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Response()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendMoveCommand_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendWaitCommand_args:
  """
  Attributes:
   - cmd
   - idConnection
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cmd', (WaitCommandData, WaitCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idConnection', None, None, ), # 2
  )

  def __init__(self, cmd=None, idConnection=None,):
    self.cmd = cmd
    self.idConnection = idConnection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cmd = WaitCommandData()
          self.cmd.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idConnection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendWaitCommand_args')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.STRUCT, 1)
      self.cmd.write(oprot)
      oprot.writeFieldEnd()
    if self.idConnection is not None:
      oprot.writeFieldBegin('idConnection', TType.I32, 2)
      oprot.writeI32(self.idConnection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendWaitCommand_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Response, Response.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Response()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendWaitCommand_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendLandCommand_args:
  """
  Attributes:
   - cmd
   - idConnection
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cmd', (LandCommandData, LandCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idConnection', None, None, ), # 2
  )

  def __init__(self, cmd=None, idConnection=None,):
    self.cmd = cmd
    self.idConnection = idConnection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cmd = LandCommandData()
          self.cmd.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idConnection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendLandCommand_args')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.STRUCT, 1)
      self.cmd.write(oprot)
      oprot.writeFieldEnd()
    if self.idConnection is not None:
      oprot.writeFieldBegin('idConnection', TType.I32, 2)
      oprot.writeI32(self.idConnection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendLandCommand_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Response, Response.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Response()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendLandCommand_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendFollowCommand_args:
  """
  Attributes:
   - cmd
   - idConnection
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cmd', (FollowCommandData, FollowCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idConnection', None, None, ), # 2
  )

  def __init__(self, cmd=None, idConnection=None,):
    self.cmd = cmd
    self.idConnection = idConnection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cmd = FollowCommandData()
          self.cmd.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idConnection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendFollowCommand_args')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.STRUCT, 1)
      self.cmd.write(oprot)
      oprot.writeFieldEnd()
    if self.idConnection is not None:
      oprot.writeFieldBegin('idConnection', TType.I32, 2)
      oprot.writeI32(self.idConnection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendFollowCommand_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Response, Response.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Response()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendFollowCommand_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendAttackCommand_args:
  """
  Attributes:
   - cmd
   - idConnection
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cmd', (AttackCommandData, AttackCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idConnection', None, None, ), # 2
  )

  def __init__(self, cmd=None, idConnection=None,):
    self.cmd = cmd
    self.idConnection = idConnection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cmd = AttackCommandData()
          self.cmd.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idConnection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendAttackCommand_args')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.STRUCT, 1)
      self.cmd.write(oprot)
      oprot.writeFieldEnd()
    if self.idConnection is not None:
      oprot.writeFieldBegin('idConnection', TType.I32, 2)
      oprot.writeI32(self.idConnection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendAttackCommand_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Response, Response.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Response()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendAttackCommand_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendDropMilitarsCommand_args:
  """
  Attributes:
   - cmd
   - idConnection
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cmd', (DropMilitarsCommandData, DropMilitarsCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idConnection', None, None, ), # 2
  )

  def __init__(self, cmd=None, idConnection=None,):
    self.cmd = cmd
    self.idConnection = idConnection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cmd = DropMilitarsCommandData()
          self.cmd.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idConnection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendDropMilitarsCommand_args')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.STRUCT, 1)
      self.cmd.write(oprot)
      oprot.writeFieldEnd()
    if self.idConnection is not None:
      oprot.writeFieldBegin('idConnection', TType.I32, 2)
      oprot.writeI32(self.idConnection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendDropMilitarsCommand_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Response, Response.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Response()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendDropMilitarsCommand_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendFillFuelTankCommand_args:
  """
  Attributes:
   - cmd
   - idConnection
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cmd', (FillFuelTankCommandData, FillFuelTankCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idConnection', None, None, ), # 2
  )

  def __init__(self, cmd=None, idConnection=None,):
    self.cmd = cmd
    self.idConnection = idConnection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cmd = FillFuelTankCommandData()
          self.cmd.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idConnection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendFillFuelTankCommand_args')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.STRUCT, 1)
      self.cmd.write(oprot)
      oprot.writeFieldEnd()
    if self.idConnection is not None:
      oprot.writeFieldBegin('idConnection', TType.I32, 2)
      oprot.writeI32(self.idConnection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendFillFuelTankCommand_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Response, Response.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Response()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendFillFuelTankCommand_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendExchangeResourcesCommandData_args:
  """
  Attributes:
   - cmd
   - idConnection
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cmd', (ExchangeResourcesCommandData, ExchangeResourcesCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idConnection', None, None, ), # 2
  )

  def __init__(self, cmd=None, idConnection=None,):
    self.cmd = cmd
    self.idConnection = idConnection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cmd = ExchangeResourcesCommandData()
          self.cmd.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idConnection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendExchangeResourcesCommandData_args')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.STRUCT, 1)
      self.cmd.write(oprot)
      oprot.writeFieldEnd()
    if self.idConnection is not None:
      oprot.writeFieldBegin('idConnection', TType.I32, 2)
      oprot.writeI32(self.idConnection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendExchangeResourcesCommandData_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Response, Response.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Response()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendExchangeResourcesCommandData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendBuildPlaneCommand_args:
  """
  Attributes:
   - cmd
   - idConnection
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cmd', (BuildPlaneCommandData, BuildPlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idConnection', None, None, ), # 2
  )

  def __init__(self, cmd=None, idConnection=None,):
    self.cmd = cmd
    self.idConnection = idConnection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cmd = BuildPlaneCommandData()
          self.cmd.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idConnection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendBuildPlaneCommand_args')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.STRUCT, 1)
      self.cmd.write(oprot)
      oprot.writeFieldEnd()
    if self.idConnection is not None:
      oprot.writeFieldBegin('idConnection', TType.I32, 2)
      oprot.writeI32(self.idConnection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendBuildPlaneCommand_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Response, Response.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Response()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendBuildPlaneCommand_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendCancelBuildRequestCommandData_args:
  """
  Attributes:
   - cmd
   - idConnection
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cmd', (CancelBuildRequestCommandData, CancelBuildRequestCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idConnection', None, None, ), # 2
  )

  def __init__(self, cmd=None, idConnection=None,):
    self.cmd = cmd
    self.idConnection = idConnection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cmd = CancelBuildRequestCommandData()
          self.cmd.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idConnection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendCancelBuildRequestCommandData_args')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.STRUCT, 1)
      self.cmd.write(oprot)
      oprot.writeFieldEnd()
    if self.idConnection is not None:
      oprot.writeFieldBegin('idConnection', TType.I32, 2)
      oprot.writeI32(self.idConnection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendCancelBuildRequestCommandData_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Response, Response.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Response()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendCancelBuildRequestCommandData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
