#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PlaneStateData:
  IDLE = 1
  GOING_TO = 2
  FOLLOWING = 3
  ATTACKING = 4
  LANDING = 5
  AT_AIRPORT = 6
  DEAD = 7

  _VALUES_TO_NAMES = {
    1: "IDLE",
    2: "GOING_TO",
    3: "FOLLOWING",
    4: "ATTACKING",
    5: "LANDING",
    6: "AT_AIRPORT",
    7: "DEAD",
  }

  _NAMES_TO_VALUES = {
    "IDLE": 1,
    "GOING_TO": 2,
    "FOLLOWING": 3,
    "ATTACKING": 4,
    "LANDING": 5,
    "AT_AIRPORT": 6,
    "DEAD": 7,
  }


class CoordData:
  """
  Attributes:
   - x
   - y
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'x', None, None, ), # 1
    (2, TType.DOUBLE, 'y', None, None, ), # 2
  )

  def __init__(self, x=None, y=None,):
    self.x = x
    self.y = y

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.x = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.y = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CoordData')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.DOUBLE, 1)
      oprot.writeDouble(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.DOUBLE, 2)
      oprot.writeDouble(self.y)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlaneBasicData:
  """
  Attributes:
   - plane_id
   - posit
   - ai_id
   - health
   - canAttack
   - planeTypeId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'plane_id', None, None, ), # 1
    (2, TType.STRUCT, 'posit', (CoordData, CoordData.thrift_spec), None, ), # 2
    (3, TType.I32, 'ai_id', None, None, ), # 3
    (4, TType.DOUBLE, 'health', None, None, ), # 4
    (5, TType.BOOL, 'canAttack', None, None, ), # 5
    (6, TType.I32, 'planeTypeId', None, None, ), # 6
  )

  def __init__(self, plane_id=None, posit=None, ai_id=None, health=None, canAttack=None, planeTypeId=None,):
    self.plane_id = plane_id
    self.posit = posit
    self.ai_id = ai_id
    self.health = health
    self.canAttack = canAttack
    self.planeTypeId = planeTypeId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.plane_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.posit = CoordData()
          self.posit.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.ai_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.health = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.canAttack = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.planeTypeId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlaneBasicData')
    if self.plane_id is not None:
      oprot.writeFieldBegin('plane_id', TType.I32, 1)
      oprot.writeI32(self.plane_id)
      oprot.writeFieldEnd()
    if self.posit is not None:
      oprot.writeFieldBegin('posit', TType.STRUCT, 2)
      self.posit.write(oprot)
      oprot.writeFieldEnd()
    if self.ai_id is not None:
      oprot.writeFieldBegin('ai_id', TType.I32, 3)
      oprot.writeI32(self.ai_id)
      oprot.writeFieldEnd()
    if self.health is not None:
      oprot.writeFieldBegin('health', TType.DOUBLE, 4)
      oprot.writeDouble(self.health)
      oprot.writeFieldEnd()
    if self.canAttack is not None:
      oprot.writeFieldBegin('canAttack', TType.BOOL, 5)
      oprot.writeBool(self.canAttack)
      oprot.writeFieldEnd()
    if self.planeTypeId is not None:
      oprot.writeFieldBegin('planeTypeId', TType.I32, 6)
      oprot.writeI32(self.planeTypeId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlaneFullData:
  """
  Attributes:
   - basic_info
   - base_id
   - remainingGaz
   - state
   - militarResourceCarried
   - fuelResourceCarried
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'basic_info', (PlaneBasicData, PlaneBasicData.thrift_spec), None, ), # 1
    (2, TType.I32, 'base_id', None, None, ), # 2
    (3, TType.DOUBLE, 'remainingGaz', None, None, ), # 3
    (4, TType.I32, 'state', None, None, ), # 4
    (5, TType.DOUBLE, 'militarResourceCarried', None, None, ), # 5
    (6, TType.DOUBLE, 'fuelResourceCarried', None, None, ), # 6
  )

  def __init__(self, basic_info=None, base_id=None, remainingGaz=None, state=None, militarResourceCarried=None, fuelResourceCarried=None,):
    self.basic_info = basic_info
    self.base_id = base_id
    self.remainingGaz = remainingGaz
    self.state = state
    self.militarResourceCarried = militarResourceCarried
    self.fuelResourceCarried = fuelResourceCarried

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.basic_info = PlaneBasicData()
          self.basic_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.base_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.remainingGaz = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.militarResourceCarried = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.fuelResourceCarried = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlaneFullData')
    if self.basic_info is not None:
      oprot.writeFieldBegin('basic_info', TType.STRUCT, 1)
      self.basic_info.write(oprot)
      oprot.writeFieldEnd()
    if self.base_id is not None:
      oprot.writeFieldBegin('base_id', TType.I32, 2)
      oprot.writeI32(self.base_id)
      oprot.writeFieldEnd()
    if self.remainingGaz is not None:
      oprot.writeFieldBegin('remainingGaz', TType.DOUBLE, 3)
      oprot.writeDouble(self.remainingGaz)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 4)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.militarResourceCarried is not None:
      oprot.writeFieldBegin('militarResourceCarried', TType.DOUBLE, 5)
      oprot.writeDouble(self.militarResourceCarried)
      oprot.writeFieldEnd()
    if self.fuelResourceCarried is not None:
      oprot.writeFieldBegin('fuelResourceCarried', TType.DOUBLE, 6)
      oprot.writeDouble(self.fuelResourceCarried)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BaseBasicData:
  """
  Attributes:
   - base_id
   - ai_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'base_id', None, None, ), # 1
    (2, TType.I32, 'ai_id', None, None, ), # 2
  )

  def __init__(self, base_id=None, ai_id=None,):
    self.base_id = base_id
    self.ai_id = ai_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.base_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ai_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BaseBasicData')
    if self.base_id is not None:
      oprot.writeFieldBegin('base_id', TType.I32, 1)
      oprot.writeI32(self.base_id)
      oprot.writeFieldEnd()
    if self.ai_id is not None:
      oprot.writeFieldBegin('ai_id', TType.I32, 2)
      oprot.writeI32(self.ai_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BaseFullData:
  """
  Attributes:
   - basic_info
   - militarRessource
   - fuelRessource
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'basic_info', (BaseBasicData, BaseBasicData.thrift_spec), None, ), # 1
    (2, TType.DOUBLE, 'militarRessource', None, None, ), # 2
    (3, TType.DOUBLE, 'fuelRessource', None, None, ), # 3
  )

  def __init__(self, basic_info=None, militarRessource=None, fuelRessource=None,):
    self.basic_info = basic_info
    self.militarRessource = militarRessource
    self.fuelRessource = fuelRessource

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.basic_info = BaseBasicData()
          self.basic_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.militarRessource = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.fuelRessource = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BaseFullData')
    if self.basic_info is not None:
      oprot.writeFieldBegin('basic_info', TType.STRUCT, 1)
      self.basic_info.write(oprot)
      oprot.writeFieldEnd()
    if self.militarRessource is not None:
      oprot.writeFieldBegin('militarRessource', TType.DOUBLE, 2)
      oprot.writeDouble(self.militarRessource)
      oprot.writeFieldEnd()
    if self.fuelRessource is not None:
      oprot.writeFieldBegin('fuelRessource', TType.DOUBLE, 3)
      oprot.writeDouble(self.fuelRessource)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BaseInitData:
  """
  Attributes:
   - base_id
   - posit
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'base_id', None, None, ), # 1
    (2, TType.STRUCT, 'posit', (CoordData, CoordData.thrift_spec), None, ), # 2
  )

  def __init__(self, base_id=None, posit=None,):
    self.base_id = base_id
    self.posit = posit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.base_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.posit = CoordData()
          self.posit.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BaseInitData')
    if self.base_id is not None:
      oprot.writeFieldBegin('base_id', TType.I32, 1)
      oprot.writeI32(self.base_id)
      oprot.writeFieldEnd()
    if self.posit is not None:
      oprot.writeFieldBegin('posit', TType.STRUCT, 2)
      self.posit.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProgressAxisInitData:
  """
  Attributes:
   - id
   - base1_id
   - base2_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'base1_id', None, None, ), # 2
    (3, TType.I32, 'base2_id', None, None, ), # 3
  )

  def __init__(self, id=None, base1_id=None, base2_id=None,):
    self.id = id
    self.base1_id = base1_id
    self.base2_id = base2_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.base1_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.base2_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProgressAxisInitData')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.base1_id is not None:
      oprot.writeFieldBegin('base1_id', TType.I32, 2)
      oprot.writeI32(self.base1_id)
      oprot.writeFieldEnd()
    if self.base2_id is not None:
      oprot.writeFieldBegin('base2_id', TType.I32, 3)
      oprot.writeI32(self.base2_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProgressAxisData:
  """
  Attributes:
   - id
   - progressBase1
   - progressBase2
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.DOUBLE, 'progressBase1', None, None, ), # 2
    (3, TType.DOUBLE, 'progressBase2', None, None, ), # 3
  )

  def __init__(self, id=None, progressBase1=None, progressBase2=None,):
    self.id = id
    self.progressBase1 = progressBase1
    self.progressBase2 = progressBase2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.progressBase1 = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.progressBase2 = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProgressAxisData')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.progressBase1 is not None:
      oprot.writeFieldBegin('progressBase1', TType.DOUBLE, 2)
      oprot.writeDouble(self.progressBase1)
      oprot.writeFieldEnd()
    if self.progressBase2 is not None:
      oprot.writeFieldBegin('progressBase2', TType.DOUBLE, 3)
      oprot.writeDouble(self.progressBase2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestData:
  """
  Attributes:
   - requestId
   - timeBeforePlaneBuilt
   - planeTypeId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'requestId', None, None, ), # 1
    (2, TType.DOUBLE, 'timeBeforePlaneBuilt', None, None, ), # 2
    (3, TType.I32, 'planeTypeId', None, None, ), # 3
  )

  def __init__(self, requestId=None, timeBeforePlaneBuilt=None, planeTypeId=None,):
    self.requestId = requestId
    self.timeBeforePlaneBuilt = timeBeforePlaneBuilt
    self.planeTypeId = planeTypeId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.requestId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.timeBeforePlaneBuilt = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.planeTypeId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestData')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.I32, 1)
      oprot.writeI32(self.requestId)
      oprot.writeFieldEnd()
    if self.timeBeforePlaneBuilt is not None:
      oprot.writeFieldBegin('timeBeforePlaneBuilt', TType.DOUBLE, 2)
      oprot.writeDouble(self.timeBeforePlaneBuilt)
      oprot.writeFieldEnd()
    if self.planeTypeId is not None:
      oprot.writeFieldBegin('planeTypeId', TType.I32, 3)
      oprot.writeI32(self.planeTypeId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CountryInitData:
  """
  Attributes:
   - country_id
   - country
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'country_id', None, None, ), # 1
    (2, TType.STRUCT, 'country', (CoordData, CoordData.thrift_spec), None, ), # 2
  )

  def __init__(self, country_id=None, country=None,):
    self.country_id = country_id
    self.country = country

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.country_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.country = CoordData()
          self.country.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CountryInitData')
    if self.country_id is not None:
      oprot.writeFieldBegin('country_id', TType.I32, 1)
      oprot.writeI32(self.country_id)
      oprot.writeFieldEnd()
    if self.country is not None:
      oprot.writeFieldBegin('country', TType.STRUCT, 2)
      self.country.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ConnectionData:
  """
  Attributes:
   - con_id
   - player_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'con_id', None, None, ), # 1
    (2, TType.I32, 'player_id', None, None, ), # 2
  )

  def __init__(self, con_id=None, player_id=None,):
    self.con_id = con_id
    self.player_id = player_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.con_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.player_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ConnectionData')
    if self.con_id is not None:
      oprot.writeFieldBegin('con_id', TType.I32, 1)
      oprot.writeI32(self.con_id)
      oprot.writeFieldEnd()
    if self.player_id is not None:
      oprot.writeFieldBegin('player_id', TType.I32, 2)
      oprot.writeI32(self.player_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InitData:
  """
  Attributes:
   - bases
   - mapWidth
   - mapHeight
   - progressAxis
   - myCountry
   - othersCountry
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'bases', (TType.STRUCT,(BaseInitData, BaseInitData.thrift_spec)), None, ), # 1
    (2, TType.DOUBLE, 'mapWidth', None, None, ), # 2
    (3, TType.DOUBLE, 'mapHeight', None, None, ), # 3
    (4, TType.LIST, 'progressAxis', (TType.STRUCT,(ProgressAxisInitData, ProgressAxisInitData.thrift_spec)), None, ), # 4
    (5, TType.STRUCT, 'myCountry', (CountryInitData, CountryInitData.thrift_spec), None, ), # 5
    (6, TType.LIST, 'othersCountry', (TType.STRUCT,(CountryInitData, CountryInitData.thrift_spec)), None, ), # 6
  )

  def __init__(self, bases=None, mapWidth=None, mapHeight=None, progressAxis=None, myCountry=None, othersCountry=None,):
    self.bases = bases
    self.mapWidth = mapWidth
    self.mapHeight = mapHeight
    self.progressAxis = progressAxis
    self.myCountry = myCountry
    self.othersCountry = othersCountry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.bases = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = BaseInitData()
            _elem5.read(iprot)
            self.bases.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.mapWidth = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.mapHeight = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.progressAxis = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = ProgressAxisInitData()
            _elem11.read(iprot)
            self.progressAxis.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.myCountry = CountryInitData()
          self.myCountry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.othersCountry = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = CountryInitData()
            _elem17.read(iprot)
            self.othersCountry.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InitData')
    if self.bases is not None:
      oprot.writeFieldBegin('bases', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.bases))
      for iter18 in self.bases:
        iter18.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mapWidth is not None:
      oprot.writeFieldBegin('mapWidth', TType.DOUBLE, 2)
      oprot.writeDouble(self.mapWidth)
      oprot.writeFieldEnd()
    if self.mapHeight is not None:
      oprot.writeFieldBegin('mapHeight', TType.DOUBLE, 3)
      oprot.writeDouble(self.mapHeight)
      oprot.writeFieldEnd()
    if self.progressAxis is not None:
      oprot.writeFieldBegin('progressAxis', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.progressAxis))
      for iter19 in self.progressAxis:
        iter19.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.myCountry is not None:
      oprot.writeFieldBegin('myCountry', TType.STRUCT, 5)
      self.myCountry.write(oprot)
      oprot.writeFieldEnd()
    if self.othersCountry is not None:
      oprot.writeFieldBegin('othersCountry', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.othersCountry))
      for iter20 in self.othersCountry:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Data:
  """
  Attributes:
   - numFrame
   - owned_planes
   - not_owned_planes
   - owned_bases
   - not_owned_visible_bases
   - not_owned_not_visible_bases
   - progressAxis
   - productionLine
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'numFrame', None, None, ), # 1
    (2, TType.LIST, 'owned_planes', (TType.STRUCT,(PlaneFullData, PlaneFullData.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'not_owned_planes', (TType.STRUCT,(PlaneBasicData, PlaneBasicData.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'owned_bases', (TType.STRUCT,(BaseFullData, BaseFullData.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'not_owned_visible_bases', (TType.STRUCT,(BaseFullData, BaseFullData.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'not_owned_not_visible_bases', (TType.STRUCT,(BaseBasicData, BaseBasicData.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'progressAxis', (TType.STRUCT,(ProgressAxisData, ProgressAxisData.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'productionLine', (TType.STRUCT,(RequestData, RequestData.thrift_spec)), None, ), # 8
  )

  def __init__(self, numFrame=None, owned_planes=None, not_owned_planes=None, owned_bases=None, not_owned_visible_bases=None, not_owned_not_visible_bases=None, progressAxis=None, productionLine=None,):
    self.numFrame = numFrame
    self.owned_planes = owned_planes
    self.not_owned_planes = not_owned_planes
    self.owned_bases = owned_bases
    self.not_owned_visible_bases = not_owned_visible_bases
    self.not_owned_not_visible_bases = not_owned_not_visible_bases
    self.progressAxis = progressAxis
    self.productionLine = productionLine

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.numFrame = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.owned_planes = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = PlaneFullData()
            _elem26.read(iprot)
            self.owned_planes.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.not_owned_planes = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = PlaneBasicData()
            _elem32.read(iprot)
            self.not_owned_planes.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.owned_bases = []
          (_etype36, _size33) = iprot.readListBegin()
          for _i37 in xrange(_size33):
            _elem38 = BaseFullData()
            _elem38.read(iprot)
            self.owned_bases.append(_elem38)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.not_owned_visible_bases = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = BaseFullData()
            _elem44.read(iprot)
            self.not_owned_visible_bases.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.not_owned_not_visible_bases = []
          (_etype48, _size45) = iprot.readListBegin()
          for _i49 in xrange(_size45):
            _elem50 = BaseBasicData()
            _elem50.read(iprot)
            self.not_owned_not_visible_bases.append(_elem50)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.progressAxis = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in xrange(_size51):
            _elem56 = ProgressAxisData()
            _elem56.read(iprot)
            self.progressAxis.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.productionLine = []
          (_etype60, _size57) = iprot.readListBegin()
          for _i61 in xrange(_size57):
            _elem62 = RequestData()
            _elem62.read(iprot)
            self.productionLine.append(_elem62)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Data')
    if self.numFrame is not None:
      oprot.writeFieldBegin('numFrame', TType.I32, 1)
      oprot.writeI32(self.numFrame)
      oprot.writeFieldEnd()
    if self.owned_planes is not None:
      oprot.writeFieldBegin('owned_planes', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.owned_planes))
      for iter63 in self.owned_planes:
        iter63.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.not_owned_planes is not None:
      oprot.writeFieldBegin('not_owned_planes', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.not_owned_planes))
      for iter64 in self.not_owned_planes:
        iter64.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.owned_bases is not None:
      oprot.writeFieldBegin('owned_bases', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.owned_bases))
      for iter65 in self.owned_bases:
        iter65.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.not_owned_visible_bases is not None:
      oprot.writeFieldBegin('not_owned_visible_bases', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.not_owned_visible_bases))
      for iter66 in self.not_owned_visible_bases:
        iter66.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.not_owned_not_visible_bases is not None:
      oprot.writeFieldBegin('not_owned_not_visible_bases', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.not_owned_not_visible_bases))
      for iter67 in self.not_owned_not_visible_bases:
        iter67.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.progressAxis is not None:
      oprot.writeFieldBegin('progressAxis', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.progressAxis))
      for iter68 in self.progressAxis:
        iter68.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.productionLine is not None:
      oprot.writeFieldBegin('productionLine', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.productionLine))
      for iter69 in self.productionLine:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommandData:
  """
  Attributes:
   - numFrame
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'numFrame', None, None, ), # 1
  )

  def __init__(self, numFrame=None,):
    self.numFrame = numFrame

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.numFrame = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommandData')
    if self.numFrame is not None:
      oprot.writeFieldBegin('numFrame', TType.I32, 1)
      oprot.writeI32(self.numFrame)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlaneCommandData:
  """
  Attributes:
   - c
   - idPlane
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'c', (CommandData, CommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idPlane', None, None, ), # 2
  )

  def __init__(self, c=None, idPlane=None,):
    self.c = c
    self.idPlane = idPlane

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.c = CommandData()
          self.c.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idPlane = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlaneCommandData')
    if self.c is not None:
      oprot.writeFieldBegin('c', TType.STRUCT, 1)
      self.c.write(oprot)
      oprot.writeFieldEnd()
    if self.idPlane is not None:
      oprot.writeFieldBegin('idPlane', TType.I32, 2)
      oprot.writeI32(self.idPlane)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveCommandData:
  """
  Attributes:
   - pc
   - posDest
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'posDest', (CoordData, CoordData.thrift_spec), None, ), # 2
  )

  def __init__(self, pc=None, posDest=None,):
    self.pc = pc
    self.posDest = posDest

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.posDest = CoordData()
          self.posDest.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.posDest is not None:
      oprot.writeFieldBegin('posDest', TType.STRUCT, 2)
      self.posDest.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WaitCommandData:
  """
  Attributes:
   - pc
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
  )

  def __init__(self, pc=None,):
    self.pc = pc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WaitCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LandCommandData:
  """
  Attributes:
   - pc
   - idBase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idBase', None, None, ), # 2
  )

  def __init__(self, pc=None, idBase=None,):
    self.pc = pc
    self.idBase = idBase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idBase = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LandCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.idBase is not None:
      oprot.writeFieldBegin('idBase', TType.I32, 2)
      oprot.writeI32(self.idBase)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AttackCommandData:
  """
  Attributes:
   - pc
   - idTarget
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idTarget', None, None, ), # 2
  )

  def __init__(self, pc=None, idTarget=None,):
    self.pc = pc
    self.idTarget = idTarget

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idTarget = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AttackCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.idTarget is not None:
      oprot.writeFieldBegin('idTarget', TType.I32, 2)
      oprot.writeI32(self.idTarget)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FollowCommandData:
  """
  Attributes:
   - pc
   - idTarget
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idTarget', None, None, ), # 2
  )

  def __init__(self, pc=None, idTarget=None,):
    self.pc = pc
    self.idTarget = idTarget

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idTarget = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FollowCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.idTarget is not None:
      oprot.writeFieldBegin('idTarget', TType.I32, 2)
      oprot.writeI32(self.idTarget)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DropMilitarsCommandData:
  """
  Attributes:
   - pc
   - base_id
   - quantity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'base_id', None, None, ), # 2
    (3, TType.DOUBLE, 'quantity', None, None, ), # 3
  )

  def __init__(self, pc=None, base_id=None, quantity=None,):
    self.pc = pc
    self.base_id = base_id
    self.quantity = quantity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.base_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.quantity = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DropMilitarsCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.base_id is not None:
      oprot.writeFieldBegin('base_id', TType.I32, 2)
      oprot.writeI32(self.base_id)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.DOUBLE, 3)
      oprot.writeDouble(self.quantity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FillFuelTankCommandData:
  """
  Attributes:
   - pc
   - quantity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.DOUBLE, 'quantity', None, None, ), # 2
  )

  def __init__(self, pc=None, quantity=None,):
    self.pc = pc
    self.quantity = quantity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.quantity = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FillFuelTankCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.DOUBLE, 2)
      oprot.writeDouble(self.quantity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExchangeResourcesCommandData:
  """
  Attributes:
   - pc
   - militar_quantity
   - fuel_quantity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.DOUBLE, 'militar_quantity', None, None, ), # 2
    (3, TType.DOUBLE, 'fuel_quantity', None, None, ), # 3
  )

  def __init__(self, pc=None, militar_quantity=None, fuel_quantity=None,):
    self.pc = pc
    self.militar_quantity = militar_quantity
    self.fuel_quantity = fuel_quantity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.militar_quantity = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.fuel_quantity = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExchangeResourcesCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.militar_quantity is not None:
      oprot.writeFieldBegin('militar_quantity', TType.DOUBLE, 2)
      oprot.writeDouble(self.militar_quantity)
      oprot.writeFieldEnd()
    if self.fuel_quantity is not None:
      oprot.writeFieldBegin('fuel_quantity', TType.DOUBLE, 3)
      oprot.writeDouble(self.fuel_quantity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BuildPlaneCommandData:
  """
  Attributes:
   - c
   - planeTypeId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'c', (CommandData, CommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'planeTypeId', None, None, ), # 2
  )

  def __init__(self, c=None, planeTypeId=None,):
    self.c = c
    self.planeTypeId = planeTypeId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.c = CommandData()
          self.c.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.planeTypeId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BuildPlaneCommandData')
    if self.c is not None:
      oprot.writeFieldBegin('c', TType.STRUCT, 1)
      self.c.write(oprot)
      oprot.writeFieldEnd()
    if self.planeTypeId is not None:
      oprot.writeFieldBegin('planeTypeId', TType.I32, 2)
      oprot.writeI32(self.planeTypeId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CancelBuildRequestCommandData:
  """
  Attributes:
   - c
   - id_request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'c', (CommandData, CommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'id_request', None, None, ), # 2
  )

  def __init__(self, c=None, id_request=None,):
    self.c = c
    self.id_request = id_request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.c = CommandData()
          self.c.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.id_request = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CancelBuildRequestCommandData')
    if self.c is not None:
      oprot.writeFieldBegin('c', TType.STRUCT, 1)
      self.c.write(oprot)
      oprot.writeFieldEnd()
    if self.id_request is not None:
      oprot.writeFieldBegin('id_request', TType.I32, 2)
      oprot.writeI32(self.id_request)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Response:
  """
  Attributes:
   - code
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'code', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, code=None, message=None,):
    self.code = code
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Response')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 1)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
